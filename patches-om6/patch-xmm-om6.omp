; OM File Header - Saved 2018/07/25 15:12:16
; (6.1301 :patc (om-make-point 10 10) (om-make-point 125 263) (om-make-point 944 806) "" 183 0 "2018/01/23 12:40:56" "2018/07/25 15:12:16")
; End File Header
(in-package :om)(load-lib-for (quote ("om-xmm")))(setf *om-current-persistent* (om-load-patch1 "patch-xmm-om6" (quote ((let ((box (om-load-boxcall (quote genfun) "TEST-MODEL" (quote xmm::test-model) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "DATASET" nil))) (om-make-point 254 687) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "RUN-MODEL" (quote xmm::run-model) (quote ((om-load-inputfun (quote input-funbox) "" "SELF" nil) (om-load-inputfun (quote input-funbox) "" "DATA" nil))) (om-make-point 326 568) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "XMM-MODEL" (quote xmm::xmm-model) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "dataset" nil))) (om-make-point 230 431) (om-make-point 145 77) (if (find-class (quote xmm::xmm-model) nil) (make-instance (quote xmm::xmm-model) :dataset nil :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 335 275) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TEXT-BOX" (quote text-box) (quote ((om-load-inputfun (quote input-funbox) "dialog-item text (string)" "text" "untitled"))) (om-make-point 663 686) (om-make-point 130 50) (om-make-dialog-item (quote text-box) (om-make-point 1 1) (om-make-point 110 23) "eight" :font (om-make-font "Verdana" 11.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) nil nil (pairlis (quote (winpos winsize)) (list (om-make-point 10 40) (om-make-point 335 275))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 662 397) (om-make-point 141 114) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.05 -0.11 -0.19 -0.28 -0.32 -0.36 -0.42 -0.42 -0.44 -0.44 -0.44 -0.44 -0.44 -0.44 -0.44 -0.42 -0.36 -0.3 -0.22 -0.15 -0.09 -0.03 0.03 0.1 0.2 0.26 0.35 0.41 0.57 0.64 0.72 0.78 0.86 0.91 0.95 0.99 1.01 1.01 1.01 0.99 0.95 0.84 0.76 0.68 0.59 0.47 0.39 0.26 0.18 0.05 -0.11 -0.19 -0.28 -0.36 -0.44 -0.51 -0.57 -0.61 -0.63 -0.67 -0.67 -0.67 -0.67 -0.63 -0.59 -0.53 -0.46 -0.4 -0.32 -0.26 -0.22 -0.15 -0.07 -0.01 0.08 0.16 0.24 0.35 0.43 0.51 0.57 0.62 0.72 0.78 0.89 0.97 1.03 1.11 1.16 1.2 1.22 1.22 1.18 1.13 1.07 1.01 0.95 0.89 0.84 0.74 0.66 0.57 0.47 0.41 0.32 0.24 0.16)) (quote (0.04 0.1 0.28 0.46 0.64 0.82 1.19 1.37 1.67 1.91 2.16 2.46 2.64 2.88 3.13 3.31 3.49 3.61 3.73 3.73 3.73 3.79 3.79 3.79 3.79 3.79 3.79 3.79 3.79 3.73 3.67 3.55 3.37 3.31 3.13 2.95 2.76 2.58 2.4 2.1 1.91 1.55 1.43 1.25 1.07 0.82 0.7 0.52 0.34 0.16 -0.15 -0.33 -0.45 -0.69 -0.87 -1.06 -1.24 -1.42 -1.66 -1.9 -2.09 -2.33 -2.51 -2.75 -2.93 -3.18 -3.36 -3.48 -3.72 -3.78 -3.9 -3.96 -4.03 -4.03 -4.09 -4.09 -4.09 -4.09 -4.09 -4.09 -4.03 -3.96 -3.84 -3.78 -3.6 -3.42 -3.24 -2.99 -2.93 -2.75 -2.57 -2.39 -2.15 -1.96 -1.72 -1.54 -1.3 -1.12 -0.93 -0.69 -0.57 -0.45 -0.27 -0.21 -0.15 -0.02 0.04)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "format-data" (om-load-lisp-abspatch "format-data" 6.1301 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction 2\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (shape) $  (let ((listx (om::x-points shape))$        (listy (om::y-points shape)))$    (mat-trans$     (loop for i from 1 to (1- (length listx)) collect$           (list (nth i listx) $                 (nth i listy) $                 (- (nth i listx) (nth (1- i) listx))$                 (- (nth i listy) (nth (1- i) listy))))$     )))") (quote ((om-load-inputfun (quote input-funbox) "" "SHAPE" nil))) (om-make-point 707 529) nil (list (list (list -0.11 -0.19 -0.28 -0.32 -0.36 -0.42 -0.42 -0.44 -0.44 -0.44 -0.44 -0.44 -0.44 -0.44 -0.42 -0.36 -0.3 -0.22 -0.15 -0.09 -0.03 0.03 0.1 0.2 0.26 0.35 0.41 0.57 0.64 0.72 0.78 0.86 0.91 0.95 0.99 1.01 1.01 1.01 0.99 0.95 0.84 0.76 0.68 0.59 0.47 0.39 0.26 0.18 0.05 -0.11 -0.19 -0.28 -0.36 -0.44 -0.51 -0.57 -0.61 -0.63 -0.67 -0.67 -0.67 -0.67 -0.63 -0.59 -0.53 -0.46 -0.4 -0.32 -0.26 -0.22 -0.15 -0.07 -0.01 0.08 0.16 0.24 0.35 0.43 0.51 0.57 0.62 0.72 0.78 0.89 0.97 1.03 1.11 1.16 1.2 1.22 1.22 1.18 1.13 1.07 1.01 0.95 0.89 0.84 0.74 0.66 0.57 0.47 0.41 0.32 0.24 0.16) (list 0.1 0.28 0.46 0.64 0.82 1.19 1.37 1.67 1.91 2.16 2.46 2.64 2.88 3.13 3.31 3.49 3.61 3.73 3.73 3.73 3.79 3.79 3.79 3.79 3.79 3.79 3.79 3.79 3.73 3.67 3.55 3.37 3.31 3.13 2.95 2.76 2.58 2.4 2.1 1.91 1.55 1.43 1.25 1.07 0.82 0.7 0.52 0.34 0.16 -0.15 -0.33 -0.45 -0.69 -0.87 -1.06 -1.24 -1.42 -1.66 -1.9 -2.09 -2.33 -2.51 -2.75 -2.93 -3.18 -3.36 -3.48 -3.72 -3.78 -3.9 -3.96 -4.03 -4.03 -4.09 -4.09 -4.09 -4.09 -4.09 -4.09 -4.03 -3.96 -3.84 -3.78 -3.6 -3.42 -3.24 -2.99 -2.93 -2.75 -2.57 -2.39 -2.15 -1.96 -1.72 -1.54 -1.3 -1.12 -0.93 -0.69 -0.57 -0.45 -0.27 -0.21 -0.15 -0.02 0.04) (list -0.06 -0.08 -0.09 -0.03999999 -0.04000002 -0.059999973 0.0 -0.02000001 0.0 0.0 0.0 0.0 0.0 0.0 0.02000001 0.059999973 0.060000003 0.08000001 0.06999999 0.060000003 0.060000003 0.06 0.07 0.1 0.059999988 0.09 0.060000003 0.16 0.06999999 0.08000004 0.059999943 0.08000004 0.050000012 0.03999996 0.04000002 0.01999998 0.0 0.0 -0.01999998 -0.04000002 -0.110000015 -0.07999998 -0.07999998 -0.09000003 -0.119999975 -0.08000001 -0.13 -0.07999998 -0.13000001 -0.16 -0.08 -0.09 -0.08000001 -0.07999998 -0.06999999 -0.060000003 -0.04000002 -0.01999998 -0.04000002 0.0 0.0 0.0 0.04000002 0.04000002 0.060000003 0.06999996 0.060000003 0.08000001 0.060000003 0.03999999 0.06999999 0.080000006 0.060000003 0.089999996 0.08 0.08 0.11 0.08000001 0.07999998 0.060000003 0.050000012 0.100000024 0.059999943 0.110000015 0.08000004 0.059999943 0.08000004 0.049999953 0.04000008 0.01999998 0.0 -0.04000008 -0.049999953 -0.059999943 -0.060000062 -0.060000003 -0.060000003 -0.050000012 -0.099999964 -0.07999998 -0.09000003 -0.099999994 -0.060000003 -0.09 -0.08 -0.08) (list 0.060000003 0.18 0.18 0.17999998 0.18 0.37000006 0.17999995 0.29999995 0.24000001 0.25000012 0.29999995 0.18000007 0.24000001 0.25 0.17999983 0.18000007 0.119999886 0.120000124 0.0 0.0 0.059999943 0.0 0.0 0.0 0.0 0.0 0.0 0.0 -0.059999943 -0.059999943 -0.120000124 -0.18000007 -0.059999943 -0.17999983 -0.18000007 -0.19000006 -0.18000007 -0.17999983 -0.3000002 -0.18999994 -0.36 -0.120000005 -0.17999995 -0.17999995 -0.25000006 -0.120000005 -0.18 -0.17999998 -0.18 -0.31 -0.18 -0.119999975 -0.24000001 -0.18 -0.18999994 -0.18000007 -0.17999995 -0.24000001 -0.24000001 -0.18999994 -0.24000001 -0.18000007 -0.24000001 -0.18000007 -0.25 -0.17999983 -0.120000124 -0.24000001 -0.059999943 -0.120000124 -0.059999943 -0.07000017 0.0 -0.059999943 0.0 0.0 0.0 0.0 0.0 0.059999943 0.07000017 0.120000124 0.059999943 0.18000007 0.17999983 0.18000007 0.25 0.059999943 0.18000007 0.18000007 0.17999983 0.24000001 0.19000006 0.24000001 0.18000007 0.24000001 0.17999995 0.19 0.24000001 0.120000005 0.120000005 0.17999998 0.060000018 0.059999988 0.13000001 0.06))) nil "format-data"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "GET-ERRORS" (quote xmm::get-errors) (quote ((om-load-inputfun (quote input-funbox) "SELF" "SELF" nil))) (om-make-point 146 614) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 284 350) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 722 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 678 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "format-data" (om-load-lisp-abspatch "format-data" 6.1301 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (shape label) $  (let ((listx (om::x-points shape))$        (listy (om::y-points shape)))$    (list $     (mat-trans$      (loop for i from 1 to (1- (length listx)) collect$            (list (nth i listx) $                  (nth i listy) $                  (- (nth i listx) (nth (1- i) listx))$                  (- (nth i listy) (nth (1- i) listy))))$      )$     label)$    ))") (quote ((om-load-inputfun (quote input-funbox) "" "SHAPE" nil) (om-load-inputfun (quote input-funbox) "" "LABEL" nil))) (om-make-point 627 227) nil (list nil) "l" "format-data"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 475 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 454 299) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "format-data" (om-load-lisp-abspatch "format-data" 6.1301 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (shape label) $  (let ((listx (om::x-points shape))$        (listy (om::y-points shape)))$    (list $     (mat-trans$      (loop for i from 1 to (1- (length listx)) collect$            (list (nth i listx) $                  (nth i listy) $                  (- (nth i listx) (nth (1- i) listx))$                  (- (nth i listy) (nth (1- i) listy))))$      )$     label)$    ))") (quote ((om-load-inputfun (quote input-funbox) "" "SHAPE" nil) (om-load-inputfun (quote input-funbox) "" "LABEL" nil))) (om-make-point 380 227) nil (list nil) "l" "format-data"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST 4" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 201 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 157 302) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "format-data" (om-load-lisp-abspatch "format-data" 6.1301 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (shape label) $  (let ((listx (om::x-points shape))$        (listy (om::y-points shape)))$    (list $     (mat-trans$      (loop for i from 1 to (1- (length listx)) collect$            (list (nth i listx) $                  (nth i listy) $                  (- (nth i listx) (nth (1- i) listx))$                  (- (nth i listy) (nth (1- i) listy))))$      )$     label)$    ))") (quote ((om-load-inputfun (quote input-funbox) "" "SHAPE" nil) (om-load-inputfun (quote input-funbox) "" "LABEL" nil))) (om-make-point 106 230) nil (list nil) "l" "format-data"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 653 199) (om-make-point 48 30) "eight" "\"eight\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 399 199) (om-make-point 62 30) "triangle" "\"triangle\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 132 201) (om-make-point 49 30) "circle" "\"circle\"" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 725 105) (om-make-point 87 89) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.05 -0.11 -0.19 -0.28 -0.32 -0.36 -0.42 -0.42 -0.44 -0.44 -0.44 -0.44 -0.44 -0.44 -0.44 -0.42 -0.36 -0.3 -0.22 -0.15 -0.09 -0.03 0.03 0.1 0.2 0.26 0.35 0.41 0.57 0.64 0.72 0.78 0.86 0.91 0.95 0.99 1.01 1.01 1.01 0.99 0.95 0.84 0.76 0.68 0.59 0.47 0.39 0.26 0.18 0.05 -0.11 -0.19 -0.28 -0.36 -0.44 -0.51 -0.57 -0.61 -0.63 -0.67 -0.67 -0.67 -0.67 -0.63 -0.59 -0.53 -0.46 -0.4 -0.32 -0.26 -0.22 -0.15 -0.07 -0.01 0.08 0.16 0.24 0.35 0.43 0.51 0.57 0.62 0.72 0.78 0.89 0.97 1.03 1.11 1.16 1.2 1.22 1.22 1.18 1.13 1.07 1.01 0.95 0.89 0.84 0.74 0.66 0.57 0.47 0.41 0.32 0.24 0.16)) (quote (0.04 0.1 0.28 0.46 0.64 0.82 1.19 1.37 1.67 1.91 2.16 2.46 2.64 2.88 3.13 3.31 3.49 3.61 3.73 3.73 3.73 3.79 3.79 3.79 3.79 3.79 3.79 3.79 3.79 3.73 3.67 3.55 3.37 3.31 3.13 2.95 2.76 2.58 2.4 2.1 1.91 1.55 1.43 1.25 1.07 0.82 0.7 0.52 0.34 0.16 -0.15 -0.33 -0.45 -0.69 -0.87 -1.06 -1.24 -1.42 -1.66 -1.9 -2.09 -2.33 -2.51 -2.75 -2.93 -3.18 -3.36 -3.48 -3.72 -3.78 -3.9 -3.96 -4.03 -4.03 -4.09 -4.09 -4.09 -4.09 -4.09 -4.09 -4.03 -3.96 -3.84 -3.78 -3.6 -3.42 -3.24 -2.99 -2.93 -2.75 -2.57 -2.39 -2.15 -1.96 -1.72 -1.54 -1.3 -1.12 -0.93 -0.69 -0.57 -0.45 -0.27 -0.21 -0.15 -0.02 0.04)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 626 74) (om-make-point 87 89) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.01 -0.05 -0.11 -0.15 -0.22 -0.26 -0.32 -0.34 -0.38 -0.4 -0.42 -0.44 -0.44 -0.44 -0.44 -0.38 -0.3 -0.17 -0.11 -0.05 0.01 0.14 0.26 0.35 0.43 0.51 0.57 0.64 0.72 0.82 0.89 0.95 1.03 1.09 1.13 1.16 1.16 1.16 1.13 1.09 1.05 0.99 0.95 0.89 0.84 0.76 0.7 0.64 0.57 0.51 0.45 0.39 0.32 0.26 0.18 0.08 -0.01 -0.07 -0.15 -0.22 -0.32 -0.38 -0.42 -0.44 -0.46 -0.46 -0.44 -0.38 -0.32 -0.26 -0.22 -0.15 -0.05 0.08 0.14 0.22 0.28 0.39 0.45 0.55 0.62 0.78 0.84 0.89 0.95 1.01 1.07 1.16 1.22 1.28 1.34 1.36 1.38 1.38 1.38 1.38 1.36 1.32 1.3 1.26 1.22 1.13 1.05 0.97 0.91 0.84 0.76 0.7 0.57 0.47 0.37 0.2)) (quote (-0.21 -0.02 0.1 0.28 0.52 0.82 1.13 1.31 1.55 1.79 1.98 2.22 2.4 2.58 2.82 3.07 3.31 3.55 3.67 3.79 3.85 4.04 4.1 4.1 4.16 4.16 4.16 4.16 4.16 4.16 4.1 3.98 3.79 3.55 3.37 3.13 2.88 2.58 2.34 2.16 1.98 1.79 1.55 1.37 1.19 1.01 0.82 0.64 0.52 0.34 0.22 0.1 -0.02 -0.21 -0.33 -0.57 -0.75 -0.81 -0.93 -1.12 -1.24 -1.42 -1.6 -1.84 -2.09 -2.33 -2.57 -2.69 -2.81 -2.93 -2.99 -3.06 -3.18 -3.24 -3.3 -3.36 -3.42 -3.48 -3.48 -3.54 -3.6 -3.66 -3.66 -3.66 -3.66 -3.66 -3.66 -3.66 -3.66 -3.6 -3.48 -3.24 -3.06 -2.75 -2.57 -2.27 -2.09 -1.84 -1.66 -1.48 -1.3 -1.12 -0.99 -0.87 -0.81 -0.75 -0.69 -0.63 -0.51 -0.45 -0.33 -0.02)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 478 103) (om-make-point 87 89) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.01 -0.09 -0.17 -0.32 -0.49 -0.82 -1.09 -1.21 -1.42 -1.67 -1.73 -1.88 -2.02 -2.11 -2.21 -2.25 -2.29 -2.31 -2.36 -2.31 -2.23 -2.17 -2.09 -1.98 -1.77 -1.61 -1.44 -1.23 -1.0 -0.76 -0.53 -0.26 -0.01 0.26 0.51 0.64 0.89 1.07 1.28 1.47 1.65 1.78 1.9 1.97 2.07 2.13 2.22 2.3 2.38 2.44 2.46 2.4 2.34 2.28 2.19 2.07 1.99 1.9 1.82 1.7 1.57 1.45 1.32 1.18 1.07 0.97 0.86 0.78 0.7 0.64 0.55 0.49 0.43 0.39 0.32 0.24 0.18 0.1 0.03 -0.05 -0.07)) (quote (4.04 3.67 3.43 3.07 2.52 1.55 0.76 0.4 -0.21 -0.93 -1.24 -1.66 -2.09 -2.51 -2.81 -3.06 -3.24 -3.42 -3.6 -3.66 -3.66 -3.6 -3.54 -3.54 -3.42 -3.36 -3.36 -3.3 -3.24 -3.24 -3.18 -3.06 -3.06 -2.99 -2.93 -2.93 -2.93 -2.81 -2.81 -2.81 -2.69 -2.69 -2.69 -2.69 -2.63 -2.63 -2.63 -2.63 -2.63 -2.63 -2.45 -2.27 -2.09 -1.9 -1.6 -1.24 -0.99 -0.69 -0.39 -0.02 0.34 0.76 1.13 1.55 1.85 2.16 2.46 2.7 2.95 3.19 3.37 3.55 3.67 3.85 3.98 4.1 4.22 4.4 4.58 4.76 4.95)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 377 73) (om-make-point 87 89) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.09 -0.17 -0.28 -0.38 -0.49 -0.59 -0.73 -0.82 -0.9 -0.98 -1.05 -1.09 -1.19 -1.25 -1.3 -1.34 -1.36 -1.4 -1.4 -1.42 -1.36 -1.25 -1.13 -1.07 -0.98 -0.86 -0.76 -0.63 -0.44 -0.34 -0.19 0.05 0.24 0.32 0.49 0.64 0.78 0.91 1.01 1.13 1.22 1.3 1.38 1.43 1.49 1.55 1.61 1.67 1.72 1.72 1.67 1.65 1.61 1.57 1.51 1.47 1.4 1.32 1.26 1.18 1.09 1.01 0.91 0.82 0.74 0.66 0.55 0.41 0.35 0.26 0.2 0.14 0.12 0.1 0.08 0.05 0.05)) (quote (3.43 3.13 2.76 2.4 2.1 1.73 1.31 1.01 0.7 0.34 0.1 -0.15 -0.63 -0.99 -1.24 -1.54 -1.78 -1.96 -2.15 -2.33 -2.45 -2.57 -2.69 -2.75 -2.75 -2.81 -2.81 -2.87 -2.87 -2.87 -2.87 -2.87 -2.87 -2.87 -2.87 -2.87 -2.87 -2.87 -2.87 -2.81 -2.75 -2.75 -2.69 -2.69 -2.69 -2.69 -2.63 -2.63 -2.63 -2.45 -2.15 -1.96 -1.78 -1.54 -1.24 -1.06 -0.81 -0.57 -0.27 -0.02 0.16 0.4 0.58 0.82 1.01 1.13 1.31 1.61 1.73 2.04 2.28 2.46 2.64 2.82 3.01 3.19 3.37)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 204 99) (om-make-point 87 89) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (-0.03 -0.09 -0.17 -0.24 -0.4 -0.49 -0.57 -0.69 -0.8 -0.9 -1.0 -1.11 -1.19 -1.3 -1.36 -1.44 -1.52 -1.57 -1.61 -1.67 -1.67 -1.69 -1.69 -1.67 -1.63 -1.57 -1.48 -1.4 -1.3 -1.21 -1.11 -1.0 -0.92 -0.84 -0.73 -0.63 -0.53 -0.44 -0.34 -0.24 -0.15 -0.07 0.01 0.12 0.22 0.3 0.41 0.49 0.59 0.72 0.82 0.91 1.01 1.09 1.18 1.28 1.34 1.43 1.49 1.57 1.65 1.7 1.74 1.76 1.78 1.8 1.8 1.8 1.8 1.8 1.8 1.8 1.8 1.8 1.8 1.8 1.78 1.78 1.74 1.7 1.65 1.61 1.55 1.51 1.45 1.38 1.3 1.24 1.16 1.09 1.01 0.93 0.82 0.74 0.68 0.59 0.51 0.43 0.32 0.24 0.18 0.1 0.03)) (quote (3.55 3.55 3.55 3.55 3.49 3.43 3.31 3.13 3.01 2.82 2.58 2.4 2.22 1.91 1.73 1.49 1.25 1.07 0.88 0.64 0.46 0.28 0.04 -0.21 -0.39 -0.57 -0.75 -0.99 -1.18 -1.36 -1.48 -1.6 -1.72 -1.84 -1.96 -2.09 -2.15 -2.27 -2.39 -2.51 -2.57 -2.69 -2.75 -2.87 -2.99 -3.06 -3.12 -3.24 -3.24 -3.3 -3.3 -3.3 -3.3 -3.3 -3.3 -3.18 -3.12 -2.93 -2.75 -2.51 -2.27 -1.96 -1.72 -1.54 -1.3 -1.12 -0.93 -0.75 -0.39 -0.02 0.22 0.4 0.7 0.88 1.07 1.25 1.55 1.73 1.98 2.22 2.46 2.64 2.88 3.07 3.31 3.43 3.61 3.73 3.79 3.85 3.92 3.98 4.04 4.04 4.04 4.1 4.1 4.1 4.1 4.1 4.04 3.98 3.92)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 335 275) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC" (quote bpc) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "X coordinates (list)" "x-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "Y coordinates (list)" "y-points" (list 0 100)) (om-load-inputfun (quote input-funbox) "precision (integer) [0 - 10]" "decimals" 0))) (om-make-point 111 68) (om-make-point 87 89) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (0.07 -0.03 -0.12 -0.22 -0.33 -0.46 -0.72 -0.89 -1.08 -1.14 -1.32 -1.47 -1.61 -1.74 -1.89 -2.0 -2.11 -2.19 -2.3 -2.39 -2.45 -2.51 -2.56 -2.62 -2.66 -2.68 -2.71 -2.73 -2.73 -2.73 -2.73 -2.73 -2.68 -2.64 -2.58 -2.49 -2.39 -2.28 -2.17 -2.04 -1.94 -1.79 -1.55 -1.4 -1.29 -1.12 -0.93 -0.74 -0.52 -0.22 -0.14 0.05 0.27 0.44 0.74 0.95 1.19 1.29 1.47 1.66 1.85 2.02 2.17 2.32 2.45 2.56 2.66 2.75 2.86 2.92 3.05 3.11 3.11 3.13 3.13 3.13 3.13 3.11 3.07 3.03 2.98 2.94 2.9 2.86 2.83 2.81 2.77 2.75 2.73 2.71 2.66 2.64 2.62 2.53 2.49 2.47 2.39 2.34 2.26 2.15 2.09 1.91 1.72 1.64 1.55 1.44 1.34 1.23 1.12 1.02 0.91 0.8 0.7 0.61 0.48 0.37 0.29 0.2 0.12 0.03)) (quote (4.09 4.09 4.09 4.15 4.15 4.15 4.26 4.26 4.26 4.26 4.26 4.26 4.15 4.04 3.87 3.64 3.48 3.25 2.97 2.75 2.52 2.24 1.96 1.63 1.35 0.95 0.62 0.34 0.06 -0.22 -0.56 -0.84 -1.12 -1.4 -1.63 -1.96 -2.24 -2.52 -2.8 -3.03 -3.2 -3.42 -3.7 -3.87 -3.93 -4.04 -4.15 -4.26 -4.37 -4.49 -4.54 -4.6 -4.71 -4.77 -4.82 -4.88 -4.93 -4.93 -4.99 -4.99 -4.99 -4.99 -4.99 -4.88 -4.77 -4.65 -4.54 -4.37 -4.26 -4.15 -3.81 -3.53 -3.31 -3.03 -2.75 -2.47 -2.07 -1.74 -1.35 -0.9 -0.5 -0.11 0.28 0.73 1.07 1.4 1.68 1.96 2.19 2.41 2.64 2.86 3.08 3.48 3.7 3.87 4.09 4.26 4.43 4.54 4.65 4.71 4.82 4.82 4.88 4.88 4.88 4.88 4.88 4.88 4.88 4.88 4.82 4.77 4.71 4.65 4.6 4.54 4.49 4.43)) (quote bpc) 2))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) "x" nil (pairlis (quote (winsize winpos picture)) (list (om-make-point 586 310) (om-make-point 10 40) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (2 1 0 1 ((om-make-point 324 506) (om-make-point 325 563) (om-make-point 301 563) (om-make-point 300 687)) 0) (2 0 1 0 nil 0) (5 0 1 1 nil 0) (7 0 2 1 nil 0) (1 0 3 0 nil 0) (4 0 5 0 nil 0) (2 0 6 0 nil 0) (15 0 7 0 nil 0) (12 0 7 1 nil 0) (9 0 7 2 nil 0) (21 0 8 0 nil 0) (20 0 8 1 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (17 0 10 1 nil 0) (23 0 11 0 nil 0) (22 0 11 1 nil 0) (13 0 12 0 nil 0) (11 0 12 1 nil 0) (18 0 13 1 nil 0) (25 0 14 0 nil 0) (24 0 14 1 nil 0) (16 0 15 0 nil 0) (14 0 15 1 nil 0) (19 0 16 1 nil 0))) nil 6.1301))
